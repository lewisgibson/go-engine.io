// Code generated by MockGen. DO NOT EDIT.
// Source: transport.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./internal/mocks/mock_transport_client.go -source=transport.go TransportClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	engineio "github.com/lewisgibson/go-engine.io"
	gomock "go.uber.org/mock/gomock"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransport) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockTransportMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransport)(nil).Close), ctx)
}

// OnClose mocks base method.
func (m *MockTransport) OnClose(handler engineio.TransportCloseHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose", handler)
}

// OnClose indicates an expected call of OnClose.
func (mr *MockTransportMockRecorder) OnClose(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockTransport)(nil).OnClose), handler)
}

// OnError mocks base method.
func (m *MockTransport) OnError(handler engineio.TransportErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", handler)
}

// OnError indicates an expected call of OnError.
func (mr *MockTransportMockRecorder) OnError(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockTransport)(nil).OnError), handler)
}

// OnOpen mocks base method.
func (m *MockTransport) OnOpen(handler engineio.TransportOpenHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnOpen", handler)
}

// OnOpen indicates an expected call of OnOpen.
func (mr *MockTransportMockRecorder) OnOpen(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOpen", reflect.TypeOf((*MockTransport)(nil).OnOpen), handler)
}

// OnPacket mocks base method.
func (m *MockTransport) OnPacket(handler engineio.TransportPacketHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPacket", handler)
}

// OnPacket indicates an expected call of OnPacket.
func (mr *MockTransportMockRecorder) OnPacket(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPacket", reflect.TypeOf((*MockTransport)(nil).OnPacket), handler)
}

// Open mocks base method.
func (m *MockTransport) Open(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Open", ctx)
}

// Open indicates an expected call of Open.
func (mr *MockTransportMockRecorder) Open(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockTransport)(nil).Open), ctx)
}

// Pause mocks base method.
func (m *MockTransport) Pause(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pause", ctx)
}

// Pause indicates an expected call of Pause.
func (mr *MockTransportMockRecorder) Pause(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockTransport)(nil).Pause), ctx)
}

// Send mocks base method.
func (m *MockTransport) Send(ctx context.Context, packets []engineio.Packet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, packets)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTransportMockRecorder) Send(ctx, packets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransport)(nil).Send), ctx, packets)
}

// SetURL mocks base method.
func (m *MockTransport) SetURL(url *url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetURL", url)
}

// SetURL indicates an expected call of SetURL.
func (mr *MockTransportMockRecorder) SetURL(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetURL", reflect.TypeOf((*MockTransport)(nil).SetURL), url)
}

// State mocks base method.
func (m *MockTransport) State() engineio.TransportState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(engineio.TransportState)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockTransportMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockTransport)(nil).State))
}

// Type mocks base method.
func (m *MockTransport) Type() engineio.TransportType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(engineio.TransportType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockTransportMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockTransport)(nil).Type))
}

// MockTransportClient is a mock of TransportClient interface.
type MockTransportClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransportClientMockRecorder
}

// MockTransportClientMockRecorder is the mock recorder for MockTransportClient.
type MockTransportClientMockRecorder struct {
	mock *MockTransportClient
}

// NewMockTransportClient creates a new mock instance.
func NewMockTransportClient(ctrl *gomock.Controller) *MockTransportClient {
	mock := &MockTransportClient{ctrl: ctrl}
	mock.recorder = &MockTransportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportClient) EXPECT() *MockTransportClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockTransportClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockTransportClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTransportClient)(nil).Do), req)
}
